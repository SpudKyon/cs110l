Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
```
Dose.t work.
`to_uppercase()` is changing the contents of ref3 which is an immutable reference.


Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```
Doesn't work.
clearly, `s`'s lifetime is much shorter than `&s`.


Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
```
Worker!
`v` is mutable, what's in that could be immutable or mutable. `v[0]` continue immutable, should be ok with `println!`.
